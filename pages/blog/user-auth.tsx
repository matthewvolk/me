import React from "react";
import Head from "next/head";
import Link from "next/link";
import styles from "../../styles/user-auth.module.scss";

const UserAuth = () => {
  const contactMe = (event: any) => {
    event.preventDefault();
    window.open("mailto:matt@volk.dev", "_blank");
  };

  return (
    <div>
      <Head>
        <title>Matthew Volk</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.container}>
        <header className={styles.header}>
          <nav className={styles.nav}>
            <Link href="/">
              <a className={styles.logoLink}>
                <h1 className={styles.logo}>volk.</h1>
              </a>
            </Link>

            <div>
              <button onClick={contactMe} className={styles.button}>
                Contact Me
              </button>
            </div>
          </nav>
        </header>

        <article className={styles.article}>
          <h1 className={styles.articleTitle}>
            Build your own user authentication REST API using Node and MongoDB
          </h1>
          <p className={styles.articleAuthor}>
            by Matthew Volk on April 7th, 2018
          </p>
          <p className={styles.articleTTR}>6 minute read</p>

          <h2>Project Introduction</h2>
          <p>
            Chris Anderson from Microsoft once described Javascript as the
            &quot;English of Programming Languages&quot; - a lot of people can
            speak at least a little bit of it, even it it&apos;s bad. It&apos;s
            not a perfect language, but it&apos;s a language which is relatively
            easy to learn for a lot of people.
          </p>
          <p>
            In this tutorial, I&apos;ll show you how to build a simple REST API
            using Node.js, Express, MongoDB, and Mongoose.
          </p>
          <h2>MongoDB</h2>
          <p>
            For this project, I&apos;m going to be using a cloud-hosted, free
            version of MongoDB called{" "}
            <a
              href="https://www.mongodb.com/cloud/atlas"
              target="_blank"
              rel="noopener noreferrer"
            >
              MongoDB Atlas
            </a>
            . Go ahead and click the link, sign up for an account, and follow{" "}
            <a
              href="https://docs.atlas.mongodb.com/getting-started/"
              target="_blank"
              rel="noopener noreferrer"
            >
              this guide
            </a>
            . You should end up with a connection string that looks similar to:
          </p>
          <pre>
            mongodb+srv://&lt;dbusername&gt;:&lt;password&gt;@dev-nycjj.mongodb.net/&lt;dbname&gt;?retryWrites=true&amp;w=majority
          </pre>
          <p>Copy that string to your clipboard and head into the next step.</p>
          <h2>Folder Structure &amp; Initial Routes</h2>
          <p>
            Open up your terminal and navigate to the directory you&apos;d like
            to create your project folder in. Copy and paste the following line
            into your terminal
          </p>
          <pre>
            {/* shell */}
            mkdir PROJECT_NAME &amp;&amp; cd PROJECT_NAME &amp;&amp; npm init
          </pre>
          <p>
            Walk through each step of the <kbd>npm init</kbd> script (our entry
            point is going to be <kbd>index.js</kbd>).
          </p>
          <p>
            When you are done, create a <kbd>.env</kbd> file in the root of your
            project directory.
          </p>
          <p>
            Open the <kbd>.env</kbd> file in your text editor and enter:
          </p>
          <pre>
            {/* file name: .env */}
            MONGODB_URI=URL_YOU_COPIED_FROM_EARLIER
          </pre>
          <p>
            Save that file, and head back to your terminal. Run the following:
          </p>
          <pre>
            {/* shell */}
            npm install express mongoose bcryptjs cors dotenv jsonwebtoken
            body-parser passport-jwt passport
          </pre>
          <p>
            Once installed, create an <kbd>index.js</kbd> file in the root
            directory of your project to serve as your main entry point file.
            You&apos;ll want to import all of the modules you need for this
            file, found below:
          </p>
          <pre>
            {/* file name: index.js */}
            {/* js */}
            require(&quot;dotenv&quot;).config(); const passport =
            require(&quot;passport&quot;); const express =
            require(&quot;express&quot;); const path =
            require(&quot;path&quot;); const bodyParser =
            require(&quot;body-parser&quot;); const cors =
            require(&quot;cors&quot;); const mongoose =
            require(&quot;mongoose&quot;);
            mongoose.set(&quot;useUnifiedTopology&quot;, true);
          </pre>
          <p>Below your imports, initialize your app variable:</p>
          <pre>
            {/* file name: index.js */}
            {/* js */}
            require(&quot;dotenv&quot;).config(); const passport =
            require(&quot;passport&quot;); const express =
            require(&quot;express&quot;); const path =
            require(&quot;path&quot;); const bodyParser =
            require(&quot;body-parser&quot;); const cors =
            require(&quot;cors&quot;); const mongoose =
            require(&quot;mongoose&quot;);
            mongoose.set(&quot;useUnifiedTopology&quot;, true); const app =
            express();
          </pre>
          <p>
            Right under that, create a variable for my port number so that it is
            easily accessible and can be modified from one location in your
            file:
          </p>
        </article>

        <footer>&copy; {new Date().getFullYear()}, Matthew Volk</footer>
      </main>
    </div>
  );
};

export default UserAuth;
